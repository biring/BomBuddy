
|----------- LOCAL -----------|		|-- SERVER--|			
<Working>-<Staging>-<LocalRepo>		<RemoteRepo>	

RESET GIT CONNECTION
git config --global --unset-all remote.origin.proxy
	Resolve error: unable to access 'https://github.com/...': OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443

GIT MERGE WORKING INTO MAIN
1. Check out the main branch
git checkout main
2. Pull the latest changes from remote main
git pull origin main --rebase       # Optionally rebase to avoid unnecessary merge commits
3. Preview changes between main and working branches (optional, but recommended)
git diff main..working              # See changes before merging
4. Merge working into main
git merge working                   # Or use --no-ff for a merge commit
5. Push changes to the remote main branch
git push origin main
6. Fetch latest changes from the remote (optional, if you want to check for updates after pushing)
git fetch                           # Not strictly necessary after a successful push
7. Verify the update by viewing the remote main branch's commit history
git log origin/main --oneline       # View the recent commits


COMMIT CHANGES TO REMOTE/ORIGIN/WORKING
1. Check which branch you're on
git branch -a           # List all branches
git branch              # List local branches
git branch -r           # List remote branches
2. Review the changes made to the code
git diff                # See changes not yet staged
git diff --staged       # See changes that have been staged
3. See the status of modified files
git status              # Check status of files
git status -s           # Short status summary
4. Stage changes (add files)
git add <file-name>     # Stage a specific file
git add -A              # Stage all changes
git add .               # Stage changes in the current directory
5. Commit the staged changes
git commit -m "Short description" -m "Detailed explanation of changes"
git commit --verbose    # See the diff of staged changes
6. Pull the latest changes (to avoid conflicts)
git pull origin master --rebase  # Avoid merge commits by rebasing
7. Push changes to the remote branch
git push origin <branch>  # Push changes to the correct remote branch
8. Verify your recent commit(s)
git log -2              # Show last two commits
git log --oneline       # Compact log view, shows commit hash and message
9. Check the status again to confirm everything is synced
git status              # Confirm everything is up-to-date after pushing


FEATURE DEVELOPMENT - CREATE NEW LOCAL BRANCH
git branch <feature_branch>
	Create a new feature branch
git branch -a
	Verify new branch is created
git checkout <feature_branch>
	Start working on the new feature
git push origin <feature_branch>
	Pushed new to remote when done
	This allows for server unit testing
git branch -a
	Verify feature branch is in the remote repository

FEATURE DEVELOPMENT - MERGE FEATURE TO MASTER AND PUSH TO REMOTE
git checkout master
	Switch to master branch
git pull origin master
	Make sure you are working of the latest code as other developers may have made changes
git branch --merged
	Check merge status
git merge <feature_branch>
	Merge feature to master
git push origin master
	Push to master branch in the remote 

FEATURE DEVELOPMENT - DELETE FEATURE BRANCH
* switch to master branch. And status is up-to-date. No changes pending.
git branch --merged
	Verify feature is merged to master
git branch -d <feature_branch>
	Delete local feature branch
git branch -a
	Verify feature branch is deleted on the local repo.
	Remote repo should still show the feature branch
git push origin --delete <feature_branch>
	Delete feature branch from remote repository
git branch -a
	Verify feature branch is deleted on the remote repo.


SWITCH BRANCH
 - run git log to make sure tracked file changes are commited or discarded
 - git switch does not discard changes to tracked file
git switch [branch-name]
	Switch to the desired branch
	


RESET LOCAL BRANCH TO MATCH REMOTE BRANCH AND DISCARD LOCAL COMMITS
git checkout <your-branch>
	Navigate to the local branch you wish to reset.
git fetch origin
	Fetch the latest data from the remote repository.
OPTIONAL: git stash
	Save the changes you have not yet commited.
git reset --hard origin/<your-branch>
	Reset your branch. Local branch now matches remote branch.
	All commits to local branch are discarded.
git clean -f -d
	Remove untracked files(-f), directories(-d) 

RESET LOCAL BRANCH TO MATCH REMOTE BRANCH BUT PRESERVE LOCAL COMMITS
git checkout <your-branch>
	Navigate to the local branch you wish to reset.
git fetch origin
	Fetch the latest data from the remote repository.
git merge @U
	Merge the changes from the upstream branch (@U) into the current branch


SAVE CHANGES YOU DONT WANT TO COMMIT
git commit -a -m 'message'
	Commit message so you know what you are saving
git branch my-saved-work
	Work is saved in the <branch> in case you want it back


SAVE CHANGES YOU DONT WANT TO COMMIT TO REMOTE

1. DO: git stash
	Save current file/changes in a 'box' to open later
2. DO: git clone <repo-url> <directory.
	Create a copy of your repository. 
	This is back you can get later


DELETE UNTRACKED GIT FILES
Follow these steps to properly delete and git clean untracked files in your local workspace:
git clean -n
	Preview of files that will be deleted.
git clean -f
	Force deletion of untracked files.
git clean -f -d
	Force deletion of untracked directories.
git clean -f -x
	Force deletion of untracked .gitignore files.


