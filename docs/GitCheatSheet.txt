OVERVIEW
|------------------ LOCAL -------------------|        |----- REMOTE -----|
[Working Dir] → [Staging Area] → [Local Repo]   ←→       [Remote Repo]
       ↑             ↑               ↑                         ↑
    modify          add           commit                   push/pull
       |
       └→ [TemporaryStorage]
       		   ↑
		[Stash]
| Action                   | Command                  | Moves data from → to                                    |
| ------------------------ | ------------------------ | ------------------------------------------------------- |
| Modify files             | Your editor              | → Working Directory                                     |
| Stage changes            | `git add`                | Working Directory → Staging Area                        |
| Commit changes           | `git commit`             | Staging Area → Local Repository                         |
| Push to remote           | `git push`               | Local Repository → Remote Repository                    |
| Pull from remote         | `git pull` / `git fetch` | Remote Repository → Local Repository                    |
| Temporarily save work    | `git stash`              | Working Dir + Staging Area → Stash                      |
| Restore stashed work     | `git stash apply`        | Stash → Working Dir + (optional) Staging                |
| Restore & remove         | `git stash pop`          | Stash → Working Dir + (optional) Staging (then deletes) |

RESET GIT CONNECTION
git config --global --unset-all remote.origin.proxy
Resolve error: unable to access 'https://github.com/...': OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443

-------------------------------------------------------------------------------------------------------
CREATE NEW <feature_branch>
-------------------------------------------------------------------------------------------------------
1. Create a new local feature branch
git branch <feature_branch>             # Create a new local branch for feature development
# Example: git branch feature/user-auth

2. Verify the new branch was created
git branch -a                           # List all branches (local + remote)

3. Switch to the new feature branch
git checkout <feature_branch>           # Begin working in the new branch

4. Push the new feature branch to the remote
git push origin <feature_branch>        # Publish the branch to the remote repository
✅ This enables server-side CI/CD pipelines, remote collaboration, or unit testing

5. Verify the remote feature branch exists
git branch -a                           # Check both local and remote branches
⚠️ Remote branch should appear as: remotes/origin/<feature_branch>

6. Switch to feature branch
git checkout <feature_branch>           # Switch to branch you want to work on

-------------------------------------------------------------------------------------------------------
COMMIT CHANGES TO <feature_branch>
Use for regular commits during feature development
-------------------------------------------------------------------------------------------------------
1. Check which branch you're on
git branch -a                           # List all branches (local + remote)
git branch                              # List local branches
git branch -r                           # List remote-tracking branches

2. See the status of modified files
git status                              # Verbose status of staged and unstaged changes
git status -s                           # Short summary format (e.g., M for modified)

3. Review the changes made to the code
git diff                                # Show unstaged changes to verify what’s about to be committed.

4. Stage changes (add files)
git add <file-name>                     # Stage a specific file
git add .                               # Stage changes in the current directory
git add -A                              # Stage all changes (tracked, untracked, and deletions)

5. Review what’s staged before committing
git diff --staged                       # Show changes that are staged
git diff <file-name>                    # Show unstaged changes for a specific file

6. Commit the staged changes
git commit -m "Short summary" -m "Detailed description of changes"
git commit --verbose                    # Opens editor with visible diff of staged changes

7. Pull the latest changes before pushing (to avoid conflicts)
git pull origin <branch>                # Default pull: fetch + merge

8. Push changes to the remote branch
git push origin <branch>                # Push your commits upstream

9. Verify your recent commit(s)
git log -N                              # Show the last N commits
git log --oneline                       # Compact view: commit hash + message

10. Check status again to confirm sync
git status                              # Ensure nothing is left uncommitted or unsynced

-------------------------------------------------------------------------------------------------------
FINAL COMMIT TO <feature_branch>
To clean commit history before merge to <main>
-------------------------------------------------------------------------------------------------------
1. Check which branch you're on
git branch -a           		        # List all branches (local + remote)
git branch              		        # List local branches
git branch -r           		        # List remote-tracking branches

2. See the status of modified files
git status              		        # Verbose status of staged and unstaged changes
git status -s           		        # Short summary format (e.g., M for modified)

3. Review the changes made to the code
git diff                		        # Show unstaged changes to verify what’s about to be committed.

4. Stage changes (add files)
git add <file-name>     		        # Stage a specific file
git add .               		        # Stage changes in the current directory
git add -A              		        # Stage all changes (tracked, untracked, and deletions)

5. Review what’s staged before committing
git diff --staged       		        # Show changes that are staged
git diff <file-name>    		        # Show unstaged changes for a specific file

6. Review feature commit history (for final commit message or changelog)
git log origin/main..HEAD		        # View feature commits to write a meaningful, summarized final commit message.
    				                    # Optional: save as CHANGELOG.md or use in PR description.
7. Commit the staged changes
git commit -m "Short summary" -m "Detailed description of changes"
git commit --verbose    		        # Opens editor with visible diff of staged changes

8. Pull the latest changes before pushing (to avoid conflicts)
git pull origin <branch> --rebase
⚠️ Perform --rebase only after the feature is complete to cleanly replay your commits on top of updated main.

9. Push changes to the remote branch
git push origin <branch> --force-with-lease # Overwrites history only if your local remote-tracking ref is current
⚠️ Required after rebase. Use only on private feature branches.

10. Verify your recent commit(s)
git log -N                              # Show the last N commits
git log --oneline                       # Compact view: commit hash + message

11. Check status again to confirm sync
git status                              # Ensure nothing is left uncommitted or unsynced

-------------------------------------------------------------------------------------------------------
MERGE <feature_branch> TO <main> - Linear (Rebase + FF)
⚠️ Assumption: Both <main> and <feature_branch> are already pushed and up to date before starting.
-------------------------------------------------------------------------------------------------------
1. Ensure local refs match the server (no surprises)
git fetch --prune                       # Update remote-tracking refs; clean stale branches

2. Check out <main>
git switch <main>                       # Be on the main branch

3. Ensure local <main> matches the remote tip (linear)
git pull --rebase origin <main>         # Align local main to origin/main without a merge commit

4. Switch to <feature_branch>
git switch <feature>                    # Prepare to rebase feature on updated main

5. Rebase <feature_branch> onto <main>
git rebase <main>                       # Replay feature commits on latest main; resolve conflicts, then git rebase --continue

6. Update the remote <feature_branch> to reflect the rebase
git push --force-with-lease origin <feature> # Safe force; protects against overwriting others’ pushes

7. [Optional] Preview changes to be merged into <main>
git diff <main>..<feature> --stat       # Summarized file-level diff (post-rebase)
git diff <main>..<feature>              # Full content diff

8. Switch back to <main>
git switch <main>                       # Ready to advance main

9. Fast-forward <main> to the tip of <feature_branch> (guarantees linear history)
git merge --ff-only <feature>           # Refuses to create a merge commit

10. Push updated <main> to remote
git push origin <main>                  # Publish the linear history

11. [Optional] Verify the result
git log --oneline --decorate --graph -n 20 # Should display a straight line (no merge commits)

-------------------------------------------------------------------------------------------------------
TAG <main>
⚠️ Perform on main branch only after it is upto date and verified
-------------------------------------------------------------------------------------------------------
1. Determine next semantic version and perform COMMIT CHANGES TO <main>
git add <VERSION_FILE>
git commit -m "Bump version to X.Y.Z" -m "Reason is...."
git push origin main

2. Create annotated tag
git tag -a vX.Y.Z -m "Release vX.Y.Z: Summary of key features/fixes"

3 Push tag
git push origin vX.Y.Z

-------------------------------------------------------------------------------------------------------
DELETE <feature> BRANCH
Perform after feature development is complete and has been merged to <main>
-------------------------------------------------------------------------------------------------------
1. Check available branches
git branch -a						        # List all branches (local + remote)
✅ <feature> and <main> should both be visible

2. Confirm you are on a different branch (not the one you want to delete)
git checkout <main>					        # Switch to main or another safe branch

3. Verify the feature branch is merged
git branch --merged <main>				    # Lists local branches already merged into <main>
⚠️ Ensure <feature_branch> is listed before proceeding with deletion

4. Delete the local feature branch
git branch -d <feature_branch>				# Deletes local branch (safe delete)
⚠️ Use `-D` to force delete if not merged (not recommended)

5. Confirm local branch is deleted
git branch						            # Lists only local branches
⚠️ <feature_branch> should no longer appear in the list

6. Delete the remote feature branch (if applicable)
git push origin --delete <feature_branch>   # Removes the feature branch from the remote repository

7. Confirm remote branch is deleted
git branch -r						        # Lists remote-tracking branches only
⚠️ <origin/feature_branch> should no longer appear

8. Clean up stale remote-tracking references (optional)
git fetch --prune					        # Removes deleted remote branches from local references

-------------------------------------------------------------------------------------------------------
RESET <feature> BRANCH
Use this when you want to discard local changes and reset your local branch to match the remote
-------------------------------------------------------------------------------------------------------
1. Checkout the target local branch
git checkout <your-branch>				    # Switch to the branch you want to reset

2. Fetch the latest remote updates
git fetch origin					        # Ensures your local metadata reflects the current state of the remote branch

3. (Optional) Stash any uncommitted changes
git stash						            # Safely store uncommitted changes in case you want to recover them later

4. Reset the local branch to match the remote branch exactly
git reset --hard origin/<your-branch>       # Discards all local commits; local branch now mirrors the remote
⚠️ This will permanently delete any local commits that haven’t been pushed

5. Check the status of untracked files
git status						            # View staged, unstaged, and untracked files

6. Preview untracked files and directories that may be deleted
git clean -n <file-path>                    # Preview deletion of a specific untracked file
git clean -n -d <dir-path>                  # Preview deletion of a specific untracked directory
✅ Always preview before deleting anything

7. Delete specific untracked files
git clean -f <file-path>                    # Deletes the specified untracked file
⚠️ Do not run 'git clean -f' without specifying the file. It will force delete all files not tracked by Git (e.g., temp files, generated logs)

8. Delete specific untracked directories
git clean -f -d <dir-path>                  # Deletes the specified untracked directory
⚠️ Do not run 'git clean -f -d' without specifying the folder. It will force delete all folder not tracked by Git (e.g., cache directories, etc.)

-------------------------------------------------------------------------------------------------------
EDIT LATEST COMMIT MESSAGE
Edit the most recent commit message — whether it’s still local or already pushed to remote
-------------------------------------------------------------------------------------------------------
1. Edit the latest commit message
git commit --amend

2. Edit in Vim (default Git editor)
In normal mode (press Esc to enter):
- Use arrow keys to navigate
- Press o to insert a new line below
- Press O to insert a new line above
- Press i to enter insert mode
In insert mode:
- Edit the message text
- Press Esc to exit insert mode
To save and exit (in normal mode only):
:wq   [then press Enter]

3. [Optional] Push the amended commit
git push --force
git push --force-with-lease     # Safer when working on a shared branch
⚠️ Required if the original commit was already pushed to remote

4. Review your updated commit
git log -1                      # Shows the most recent commit, including the updated message

-------------------------------------------------------------------------------------------------------
GIT COMMIT MESSAGE TEMPLATE
-------------------------------------------------------------------------------------------------------
Use guidelines from https://www.conventionalcommits.org/en/v1.0.0/

GIT COMMIT MESSAGE TEMPLATE
git commit -m "<type>(<scope>): <short description>"
-m "<detailed description of the change 1>"
-m "<detailed description of the change 2>"
-m "<optional additional change details>"

Common Types of Change:
feat: A new feature has been added to the codebase.
fix: A bug or issue has been resolved.
docs: Changes to documentation.
style: Code style changes (e.g., formatting).
refactor: Refactoring code without changing its functionality.
test: Adding or modifying tests.
chore: Routine tasks or updates, like build scripts, dependencies, or CI configuration.
